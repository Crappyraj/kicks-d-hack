KIET_CCIP_P1_2D Array problem

A company has decided to promote interactions between connections in various apartments. They have created a number of nodes which are to be connected to form a cluster to find the above information. The nodes are described by a 2D grid of 0's and 1's with n rows and m columns, a cell containing a zero denotes not working, while a cell containing a one is a cell that denotes a working node. i.e.

(1 and 0), (0 and1) and(0 and 0) have no connections. but (1 and 1) have connection.

Input Format

-The first line contains an integer, n, denoting the number of rows in gridofNodes

-The next line contains an integer, m, denoting the number of columns in gridOfNodes

-Grid values containing only 1's and 0's

Constraints

0 < n,m <= 10

Output Format

Single line integer output denoting number of connections

Sample Input 0

3
7
1011110
0110101
1000001
Sample Output 0

28
Explanation 0

5 nodes in the first row get connected with 4 nodes in the second row, 20 connections. Then 4 nodes in the second row get connected with 2 nodes in the third row, 8 connections 20+8 = 28 connections in total.

#include <iostream>
using namespace std;

int main() {
	int arr[10][10];
	int n,m,i,j;
	int c,c3=0;
	int c2=0;
	int c4=0;
	cout<<"enter the rows:"<<endl;
	cin>>n;
	cout<<"enter the columns:"<<endl;
	cin>>m;
	cout<<"enter the  array:"<<endl;
	for(i=0;i<n;i++)
	{
	    for(j=0;j<m;j++)
	    {
	        cin>>arr[i][j];
	    }
	}
	for(i=0;i<n;i++)
	{
	    for(j=0;j<m;j++)
	    {
	        if((arr[i][j]==1)&&(i==0))
            {
                c++;
            }
            if((arr[i][j]==1)&&(i==1))
            {
                c2++;
            }
            if((arr[i][j]==1)&&(i==2))
            {

                c3++;

            }
	    }
	}
c4=c*c2+c2*c3;
cout<<c4;

	return 0;
}



#include<bits/stdc++.h>
using namespace std;

int main()
{
    int n, m;
    cin>>n>>m;
    string s[n];
    int c[n] = {0};
    int ans = 0;
    for (int i = 0; i < n; i++)
    {
        cin>>s[i];
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            char ch = s[i].at(j);
            if(ch == '1')
            {
                c[i]++;
            }
        }
    }
    for (int i = 0; i < n-1; i++)
    {
        ans = ans + c[i]*c[i+1];
    }
    cout<<ans;
    return 0;
}